stages:
  - setup
  - build-node
  - release
  - deploy-stage
  - tests-stage
  - deploy-prod
  - tests-prod

cache:
  paths:
    - node_modules/
    
setup:
  image: node:alpine
  stage: setup
  script:
    - apk add --update git
    - apk --no-cache add g++ gcc libgcc libstdc++ linux-headers make python
    - npm install --quiet node-gyp -g
    - npm install
    - npm rebuild bcrypt --build-from-source
    - npm rebuild node-sass

build-node:
  image: node:alpine
  stage: build-node
  script:
    - npm run build
  artifacts:
    paths:
      - build
      - node_modules/
      - config
      - public
      - server
      - package.json
    expire_in: 12h

release:
  image: docker:latest
  stage: release
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker build -q -f docker/Dockerfile -t $CI_REGISTRY_IMAGE .
    - docker push $CI_REGISTRY_IMAGE

deploy_stage:
  stage: deploy-stage
  image: tmaier/docker-compose
  variables:
    DOCKER_HOST: "tcp://charity-staging-do.bankex.team:2376"
    DOCKER_TLS_VERIFY: "1"
    SERVERNAME: meta.staging.bankex.team
    EMAIL: "om@bankexfoundation.org"
    NODE_ENV: "staging"
    NODE_PATH: "./build"
    DOCKER_CERT_PATH: "/certs"
  before_script:
    - mkdir -p $DOCKER_CERT_PATH
    - echo "$DO_DOCKER_CA_STAGE" > $DOCKER_CERT_PATH/ca.pem
    - echo "$DO_DOCKER_CERT_STAGE" > $DOCKER_CERT_PATH/cert.pem
    - echo "$DO_DOCKER_KEY_STAGE" > $DOCKER_CERT_PATH/key.pem
    - echo "NODE_ENV=$NODE_ENV" >> .env; echo "NODE_PATH=$NODE_PATH" >> .env; echo "VIRTUAL_HOST=$SERVERNAME" >> .env ; echo "LETSENCRYPT_HOST=$SERVERNAME" >> .env; echo "LETSENCRYPT_EMAIL=$EMAIL" >> .env
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker-compose -f docker/docker-compose.yml down
    - docker rmi $IMAGE || echo "image not exist"
    - docker pull $IMAGE
    - docker-compose -f docker/docker-compose.yml up -d
  environment:
    name: staging
    url: https://meta.staging.bankex.team
  when: manual
  allow_failure: false

tests-stage:
  image: docker:latest
  stage: tests-stage
  variables:
    DOCKER_HOST: "tcp://charity-staging-do.bankex.team:2376"
    DOCKER_TLS_VERIFY: "1"
    SERVERNAME: meta.staging.bankex.team
    NODE_ENV: "staging"
    DOCKER_CERT_PATH: "/certs"
  before_script:
    - mkdir -p $DOCKER_CERT_PATH
    - echo "$DO_DOCKER_CA_STAGE" > $DOCKER_CERT_PATH/ca.pem
    - echo "$DO_DOCKER_CERT_STAGE" > $DOCKER_CERT_PATH/cert.pem
    - echo "$DO_DOCKER_KEY_STAGE" > $DOCKER_CERT_PATH/key.pem
  script:
    - docker exec -i -e NODE_ENV=$NODE_ENV oc_meta sh -c "npm i mocha -g && npm run test"

deploy_prod:
  stage: deploy-prod
  image: tmaier/docker-compose
  variables:
    DOCKER_HOST: "tcp://charity-prod-do.bankex.team:2376"
    DOCKER_TLS_VERIFY: "1"
    SERVERNAME: meta.bankex.team
    EMAIL: "om@bankexfoundation.org"
    NODE_ENV: "production"
    NODE_PATH: "./build"
    DOCKER_CERT_PATH: "/certs"
  before_script:
    - mkdir -p $DOCKER_CERT_PATH
    - echo "$DO_DOCKER_CA_PROD" > $DOCKER_CERT_PATH/ca.pem
    - echo "$DO_DOCKER_CERT_PROD" > $DOCKER_CERT_PATH/cert.pem
    - echo "$DO_DOCKER_KEY_PROD" > $DOCKER_CERT_PATH/key.pem
    - echo "IMAGE=$IMAGE" > .env ; echo "NODE_ENV=$NODE_ENV" >> .env; echo "NODE_PATH=$NODE_PATH" >> .env; echo "VIRTUAL_HOST=$SERVERNAME" >> .env ; echo "LETSENCRYPT_HOST=$SERVERNAME" >> .env; echo "LETSENCRYPT_EMAIL=$EMAIL" >> .env
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker-compose -f docker/docker-compose-prod.yml down
    - docker rmi $IMAGE || echo "image not exist"
    - docker pull $IMAGE
    - docker-compose -f docker/docker-compose-prod.yml up -d
  environment:
    name: production
    url: https://meta.bankex.team
  only:
    - production
  when: manual
  allow_failure: false

tests-prod:
  image: docker:latest
  stage: tests-prod
  variables:
    DOCKER_HOST: "tcp://charity-prod-do.bankex.team:2376"
    DOCKER_TLS_VERIFY: "1"
    SERVERNAME: meta.bankex.team
    NODE_ENV: "production"
    DOCKER_CERT_PATH: "/certs"
  before_script:
    - mkdir -p $DOCKER_CERT_PATH
    - echo "$DO_DOCKER_CA_PROD" > $DOCKER_CERT_PATH/ca.pem
    - echo "$DO_DOCKER_CERT_PROD" > $DOCKER_CERT_PATH/cert.pem
    - echo "$DO_DOCKER_KEY_PROD" > $DOCKER_CERT_PATH/key.pem
  script:
    - docker exec -i -e NODE_ENV=$NODE_ENV oc_meta sh -c "npm i mocha -g && npm run test"
  only:
    - production
